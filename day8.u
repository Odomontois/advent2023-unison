sample = FilePath "day8/sample.txt"
sample2 = FilePath "day8/sample2.txt"
sample3 = FilePath "day8/sample3.txt"
input = FilePath "day8/input.txt"

use data Array

pat = 
    use Pattern
    use patterns
    name = capture (some (letter + digit))
    join [name, literal " = (", name , literal ", ", name, literal ")"]

structural type Parsed = {
    commands : Text, 
    nodes: List (Nat, Nat), 
    aaa: Nat, 
    zzz: Nat,
    as: List Nat,
    zs: Set Nat,
    }

parse: Text -> {} Parsed
parse input = 
    ls = lines input
    commands = toDefault! '(bug "lol") '(List.at! 0 ls)
    fromLine l = captures pat l |> cases 
                [x, y, z] -> (x, (y, z))
                _ ->  bug ("fromLine", l)
    map = List.drop 2 ls |> List.filter (not << Text.isEmpty) |> List.map fromLine 
    ones = List.range 0 (List.size map)
    names = List.map at1 map
    idxs =  List.zip names ones |> Map.fromList
    idx = flip (Map.getOrElse 0) idxs
    nodes = map |> List.map (cases (_, (x, y)) -> (idx x, idx y))
    aaa = idx "AAA"
    zzz = idx "ZZZ"
    as = names |> List.filter (endsWith "A") |> List.map idx
    zs = names |> List.filter (endsWith "Z") |> List.map idx |> Set.fromList
    Parsed commands nodes aaa zzz as zs

simulate : Parsed -> Nat -> Set Nat -> (Nat, Nat)
simulate parsed start finish = 
    commands = Parsed.commands parsed
    nodes = Parsed.nodes parsed
    cn = Text.size commands
    go ci ni s = 
        if Set.contains ni finish && (s > 0) then (ni, s) else 
        node = toDefault! '(0, 0) '(List.at! ni nodes)
        left = match charAt ci commands with
            Some ?L -> true
            _ -> false
        ci' = Nat.mod (ci + 1) cn
        ni' = if left then at1 node else at2 node
        go ci' ni' (s + 1)
    go 0 start 0

simulate': Parsed -> Nat
simulate' parsed = simulate parsed (Parsed.aaa parsed)  (parsed |> Parsed.zzz |> Set.singleton) |> at2

gcd : Natural -> Natural -> Natural
gcd a b = 
    if b > a then gcd b a else
    if b Natural.== Natural.zero then a else
    gcd b (Natural.mod a b)

lcm : Natural -> Natural -> Natural
lcm a b = a * b / gcd a b

lcm' : Nat -> Nat -> Nat
lcm' a b = toDefault! '(bug ("lcm", a, b)) '(Nat.lcm a b)

simulateGhost: Parsed -> Nat
simulateGhost parsed = 
    as = Parsed.as parsed
    Debug.trace "as" as
    zs = Parsed.zs parsed
    all = as List.++ (Set.toList zs)
    targets = List.map (i -> simulate parsed i zs) as |> List.map at2
    List.foldLeft lcm' 1 targets
    

p1 f = do readFileUtf8 f |> parse |> simulate'

s1 = p1 sample
s12 = p1 sample2
i1 = p1 input

p2 f = do readFileUtf8 f |> parse |> simulateGhost

s2 = p2 sample3

i2 = p2 input
