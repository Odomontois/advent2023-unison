sample = FilePath "day5/sample.txt"
input = FilePath "day5/input.txt"

use data Array

unique type RangeMap = RangeMap (Array (Nat, Nat, Nat))

getNums : List (Nat, Nat) -> RangeMap ->  List (Nat, Nat)
getNums ns rm = 
    use Nat + min max
    arr = match rm with RangeMap arr -> arr    
    go : Nat -> List (Nat, Nat) -> { Stream (Nat, Nat) } ()
    go i ls = 
        match Array.at i arr with 
        None -> List.foreach ls emit
        Some (x, y, r) -> 
        match ls with 
        [] -> ()
        (a, l) +: rest 
            | a >= (x + r) -> go (i + 1) ls
            | a < x -> 
                len = min l (x - a)
                emit (a, len)
                if len == l 
                then go i rest 
                else go i ((x, l - len) +: rest)
            | otherwise ->
                start = y + a - x
                len = min l (r + x - a)
                emit (start, len)
                if len == l 
                then go i rest 
                else go (i + 1) ((a + len, l - len) +: rest)
    compact : List (Nat, Nat) -> List (Nat, Nat)
    compact = cases 
        (a, l) +: ((b, m) +: rest)
            | a + l >= b -> compact ((a, b + m - a) +: rest)
            | otherwise -> (a, l) +: compact ((b, m) +: rest)
        ls -> ls                  
    '(go 0 ns) |> Stream.toList! |> sortBy at1 |> compact

getNumsAll : List (Nat, Nat) -> List RangeMap -> List (Nat, Nat)
getNumsAll = List.foldLeft getNums

seedsP : Pattern Text
seedsP = 
    use Pattern
    join[literal "seeds: ", sepMany (literal " ") (capture (some digit))]


mapP : Pattern Text
mapP = 
    use patterns
    use Pattern
    some letter + literal "-to-" + some letter + literal "map:"

parse : Text -> (List Nat, List RangeMap)
parse content = 
    lines = Text.lines content |> List.filter (not << Text.isEmpty)
    first = Abort.toBug '(List.at! 0 lines |> captures seedsP |> List.filterMap Nat.fromText)
    maps =  lines 
                |> List.drop 1 
                |> List.split (isMatch mapP) 
                |> List.drop 1 
                |> List.map parseMap
    (first, maps)

pairs : List a -> List (a, a)
pairs = cases 
    x +: (y +: xs) -> (x, y) +: pairs xs
    _ -> []

parse': Text -> (List (Nat, Nat), List RangeMap)
parse' content = 
    (nums, maps) = parse content
    (pairs nums, maps)


result: List Nat -> List RangeMap -> List (Nat, Nat)
result nums maps = 
    ones = List.replicate (List.size nums) '1
    init = List.zip (List.sort nums) ones
    getNumsAll init maps

parseMap: List Text -> RangeMap
parseMap block  = 
    triple = cases 
        [x, y, z] -> (y, x, z)
        ls -> raiseGeneric "expected triple" ls
    block 
        |> List.map (Text.split ?\s >> List.filterMap Nat.fromText >> triple)
        |> sortBy at1
        |> Array.fromList
        |> RangeMap


fst = List.head >> getOrBug "lol" >> at1

s1 = do readFileUtf8 sample |> parse |> uncurry result |> fst

p1 = do readFileUtf8 input |> parse |> uncurry result |> fst

s2 = do readFileUtf8 sample |> parse' |> uncurry getNumsAll
p2 = do readFileUtf8 input |> parse' |> uncurry getNumsAll  |> List.take 5

-- 25789078 25789078