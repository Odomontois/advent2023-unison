file = s -> "day23/" ++ s ++ ".txt" |> FilePath |> readFileUtf8 |> lines
input = delay file "input"
sample = delay file "sample"


unique type Road ref = Fork ref ref | Path Nat ref | Goal

Road.map : (i ->{g} o) -> Road i ->{g} Road o
Road.map f = cases 
    Fork l r -> Fork (f l) (f r)
    Path n r -> Path n (f r)
    Goal -> Goal

byDir : Nat -> Nat -> Char -> (Nat, Nat)
byDir x y = cases
    ?^ -> (x - 1, y)
    ?v -> (x + 1, y)
    ?< -> (x, y - 1)
    ?> -> (x, y + 1)
    _ -> (x, y)

steps = "v^<>" |> toCharList

structural type WalkState r = {start: r, land: Map r (Road r)}
WalkState.add p = cases WalkState s m -> WalkState s (insert s p m)

parse : [Text] -> [Road Nat]
parse landscape = 
    eq x y x' y' = (x == x') && (y == y')
    goTo xc yc xp yp dir = 
        (x, y) = byDir xc yc dir
        if (eq x y xp yp) || (eq x y xc yc) then None else 
        l = List.at x landscape |> flatMap (charAt y) |> getOrElse ?#
        if l == ?. then Some (x, y, true)
        else if l == dir then 
            (x', y') = byDir x y dir
            Some (x', y', false)
        else  None
    walkTo x y ws = if land ws |> contains (x, y) then ws else start.set (x, y) ws |> walk x y x y 0
    n = landscape |> size
    walk x y xp yp l ws =
        step = goTo x y xp yp
        nexts = steps |> filterMap step
        match nexts with
            [(x', y', true)] -> 
                walk x' y' x y (l + 1) ws
            [(x', y', false)] -> 
                ws |> add (Path l (x', y'))|> walkTo x' y' 
            [(x1, y1, false), (x2, y2, false)] | l == 0 -> 
                ws |> add (Fork (x1, y1) (x2, y2)) |> walkTo x1 y1 |> walkTo x2 y2
            [] | (x == (n - 1)) && (y == (n - 2)) -> 
                ws |> add (Path l (x, y)) |> start.set (x, y) |> add Goal
            n' -> bug ("une xpected nexts" ,n', ws)
    res = walkTo 0 1 (WalkState (0, 1) empty) |> land |> toList 
    idx = res |> List.map at1 |> indexed |> Map.fromList
    res |> List.map (at2 >> map (k -> get k idx |> getOrBug ("missing", k)))

getter : [a] -> Nat -> a
getter = Array.fromList >> (arr i -> Array.at i arr |> getOrBug ("missing", i))

hasLoop : [Road Nat] -> Boolean
hasLoop roads = 
    get = getter roads
    hasLoop seen i = (NatSet.contains i seen) || ( let
        seen' = insert i seen
        match get i with
            Fork l r -> hasLoop seen' l || hasLoop seen' r
            Path _ r -> hasLoop seen' r
            Goal -> false
    )
    hasLoop empty 0

longestPath : [Road Nat] -> Nat
longestPath roads =
    use mutable.Array
    get = getter roads
    Scope.run do
    res = Scope.arrayOf 0 (List.size roads)
    longest i = 
        match read res i with
        0 -> 
            r = match get i with
                Fork l r -> Nat.max (longest l) (longest r) + 2
                Path x r -> longest r + x + 2
                Goal -> 0
            write res i r
            r
        x -> x 
    longest 0 - 2


p1 = parse >> longestPath
s1 = sample >> p1
i1 = input >> p1


info : [Road Nat] -> ()
info roads = 
    counts = roads 
                |> flatMap (cases 
                    Path _ i -> [(i, 1)]
                    Fork l r -> [(l, 1), (r, 1)]
                    _ -> []) 
                |> Map.fromListWith (+)
    count i = get i counts |> Optional.getOrElse 0
    withCount = roads |> List.indexed |> List.map (cases (r, i) -> (r, count i))
    withCount |> filter (cases 
                            (Fork _ _, 1) -> true 
                            _ -> false
                        ) |> size |> trace "fwtriples"
    withCount |> filter (cases 
                            (Path _ _, 2) -> true
                            _ -> false
                        ) |> size |> trace "bktriples"
    ()

unique type Edge = {from: Nat, to: Nat, dist: Nat}

edges : [Road Nat] -> [Edge]
edges roads = 
    walkWf x i s = at i roads |> getOrBug ("walkWf", x, i) |> cases 
        Path 0 j -> Edge s i (x + 1)
        Fork l r -> Edge s i (x + 1)
        Path d j ->  walkWf (x + d + 1) j s
        Goal -> Edge s i (x - 1)

    roads 
        |> indexed 
        |> flatMap ( cases 
            (Path d i, 0) -> [walkWf 0 0 0]
            (Path 0 i, j) -> [walkWf 2 i j]
            (Path _ _, _) -> []
            (Fork l r, j) -> [walkWf 2 l j, walkWf 2 r j]
            (Goal, end) -> [])
        |> List.sort

compact : [Edge] -> [Edge]
compact edges = 
    m = edges |> flatMap ( cases Edge i j _ -> [i, j]) |> Set.fromList |> Set.toList |> indexed |> Map.fromList
    get i = Map.get i m |> getOrBug ("missing", i)
    edges |> List.map (cases Edge i j d -> Edge (get i) (get j) d)
    

unique type Adj = {edge: Nat, to: Nat, dist: Nat}    
adj : [Edge] -> [[Adj]]
adj  =  indexed 
            >> flatMap (cases (Edge i j d, e) -> [(i, [Adj e j d]), (j, [Adj e i d])]) 
            >> Map.fromListWith (++)
            >> Map.values




maxDist : [Edge] -> Nat
maxDist edges = 
    use Nat max
    use mutable.Array read write
    graph = adj edges 
    trace "graph" (indexed graph)
    g = getter graph


    fill start = 
        Scope.run do
            cache = Scope.arrayOf [] (List.size graph)

            go seen i dist k = 
                nm = read cache i
                nm' = (seen, dist) +: nm
                write cache i nm'
                if k == 0 then () else
                g i 
                    |> List.filter (Adj.to >> (j -> bit j seen == 0)) 
                    |> foreach_ cases (Adj e x d) -> go (setBit i seen) x (d + dist) (k - 1) 

            go 0 start 0 17

            Array.freeze! cache |> Array.toList

    arrStart = fill 0
    arrEnd = fill (size graph - 1)
    info : [[(Nat, a)]] -> [(Nat, Nat)]
    info = List.map (xs -> (List.size xs, List.map at1 xs |> NatSet.fromList |> NatSet.size))
    
    Debug.trace "generated" (info arrStart, info arrEnd)
    calc: [(Nat, Nat)] -> [(Nat, Nat)] -> Promise Nat
    calc fs fe = 
        promise = Promise.new ()
        _ = fork do
            x = List.foldLeft (cases x, (m1, d1) -> 
                        List.foldLeft (cases x', (m2, d2) -> 
                            if and m1 m2 == 0 then max (d1 + d2) x' else x') x fe) 0 fs
            write_ promise x
        promise

    List.zipWith calc arrStart arrEnd 
        |> List.map Promise.read                      
        |> List.maximum
        |> Optional.getOrElse 0
        


p2 = parse >> edges >> compact >> maxDist

s2 = sample >> p2
i2 = input >> p2