sample = FilePath "day12/sample.txt"
input = FilePath "day12/input.txt"


parse: Text -> {Abort} (Text, List Nat)
parse line = match Text.split ?\s line with
    [pat, groups] -> 
        groupList = Text.split ?, groups |> List.map (Nat.fromText >> Optional.toAbort)
        (pat, groupList)
    _ -> abort
    

parse' l = Abort.toGenericException "shitty text" l do parse l

unfold: (Text, List Nat) -> (Text, List Nat)
unfold = cases (txt, groups) ->
    txt' = Text.join "?" (List.fill 5 txt)
    groups' = List.join (List.fill 5 groups)
    (txt', groups')




solve : Text -> List Nat -> {} Nat
solve withoutSpace =
    use Optional getOrElse
    withSpace = withoutSpace ++ "."
    byGroup: List Nat -> List Nat
    byGroup = cases
        [] -> 
            lastBrick = Text.dropRightWhile (c -> c Char.!= ?#) withSpace |> Text.size
            List.fill lastBrick 0 List.++ List.fill (Text.size withSpace + 1 - lastBrick) 1
        group +: rest -> 
            shiftGroup = byGroup rest
            groupPattern = Pattern.join [Pattern.replicate group group (charIn [?#, ??]), charIn [?., ??]]
            byPat: Nat -> Text -> List Nat 
            byPat i pat = 
                if Text.isEmpty pat then [] else
                shiftPat = byPat (i + 1) (Text.drop 1 pat)
                c = charAt 0 pat |> getOrElse ?! 
                hereAndNow = 
                    if isMatch groupPattern pat then
                        -- Debug.trace "matched"  (group, i, pat, shiftGroup)

                        List.at (group + i + 1) shiftGroup 
                            |> getOrElse 0
                            -- |> Debug.tap "filling"
                    else 0 
                later = List.head shiftPat |> Optional.filter (_ -> c Char.!= ?#) |> getOrElse 0
                (hereAndNow Nat.+ later) +: shiftPat
            -- Debug.trace "input" (group, rest)
            -- Debug.tap "result" 
            byPat 0 withSpace
    byGroup >> List.head >> getOrElse 0

patterns = List.range 0 20 |> List.map (i -> Pattern.join [Pattern.replicate i i (charIn [?#, ??]), charIn [?., ??]])

solve' : Text -> List Nat -> {} Nat
solve' pattern' groups =
    use Optional getOrElse
    pattern = pattern' Text.++ "."
    n = Text.size pattern
    byPat: Nat -> List Nat -> List Nat
    byPat i prevPat = 
        space = charAt i pattern |> getOrElse ?! |> (c -> c Char.!= ?#)
        onlySpaces = (Text.drop i pattern |> Text.dropRightWhile (c -> c Char.!= ?#)) Text.== ""
        initial = if onlySpaces then 1 else 0
        byGroup : Nat -> Nat -> Nat
        byGroup group prevGroup = 
            groupPat = List.at group patterns |> getOrElse Pattern.empty
            hereAndNow = if Text.drop i pattern |> isMatch groupPat then
                            List.at (group + i + 1) prevPat |> getOrElse 0
                         else 0 
            later = if space then prevGroup else 0
            hereAndNow Nat.+ later
        next = List.scanRight byGroup initial groups |> Nonempty.toList
        Debug.trace "--" (charAt i pattern, i, next)
        if i == 0 then next else byPat (i - 1) next
    initial = List.map (_ -> 0) groups List.++ [1] |> Debug.tap "initial"
    byPat (Text.size pattern - 1) initial |> List.head |> getOrElse 0

-- > solve' "???.###" [1, 1, 3]

-- > solve' "##.." [2]

-- > solve' "???.###." [1, 1, 3]

> solve' "??...?##" [1, 1, 3]

> solve' "?###????????" [3, 2, 1]

> solve "?????" [2,1]

exe = do solve' "???...?##" [1, 1, 3]

act line f = do readFileUtf8 f |> lines |> List.takeWhile (not << Text.isEmpty) |> List.map line |> sumNats
p1 = act (parse' >> uncurry solve) 
p2 = act (parse' >> unfold >> uncurry solve)

s1 = p1 sample
i1 = p1 input

s2 = p2 sample
i2 = p2 input