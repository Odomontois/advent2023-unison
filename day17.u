read = (Text.++) "day17/" 
        >> flip (Text.++) ".txt" 
        >> FilePath 
        >> readFileUtf8 
        >> Text.lines 
        >> List.map (toCharList >> List.map (Char.toNat >> flip (Nat.-) 48))
updateDist:  Nat -> Nat -> Nat -> Nat -> [[[Nat]]] -> [[[Nat]]]   
updateDist d x y = updateAt (updateAt (replace y d) x)

start : '{Abort, Ask Config} Dijkstra
start = do 
    n = List.size (grid ask)
    first dir = (Elem 0 0 0 dir, ())
    queue = Map.fromList [first 0, first 1]
    dists = fill n maxNat |> fill n |> fill 2 |> updateDist 0 0 0 0 |> updateDist 0 0 0 1
    Dijkstra queue dists

structural type Elem = {dist: Nat, x: Nat, y: Nat, dir: Nat}

structural type Config = { startStep: Int, maxStep: Nat, grid: [[Nat]] }
structural type Dijkstra = { queue : Map Elem (), dists: [[[Nat]]]}

use Nat ==

buggy : a -> '{g, Abort} b -> {g} b
buggy el = toDefault! '(bug el) 

nexts : Dijkstra -> Elem -> {Stream Elem, Abort, Ask Config} ()
nexts = cases (Dijkstra _ dis), (Elem h x y dir) -> let
    walk dx dy dir = 
        start = startStep ask
        n = gridSize () |> Nat.toInt
        go : Int -> Int -> Nat -> Nat -> {Stream Elem, Abort, Ask Config} ()
        go x y i h' = 
            when ((i > 0) && (x >= +0) && (x < n) && (y >= +0) && (y < n)) do
                nx = Int.toNat x |> Optional.getOrElse 0
                ny = Int.toNat y |> Optional.getOrElse 0          
                h = (grid ask |> at! nx |> at! ny) + h'
                cur =  dis |> at! dir |> at! nx |> at! ny
                when (h Nat.< cur) do
                    emit (Elem h nx ny dir)
                go (x + dx) (y + dy) (Nat.decrement i) h
        startX = (toInt x) Int.+ (start Int.* dx)
        startY = (toInt y) + (start Int.* dy)
        go startX startY (maxStep ask) h
    stop = maxStep ask
    if dir == 1 then
        walk +1 +0 0
        walk -1 +0 0
    else
        walk +0 +1 1
        walk +0 -1 1

account :  Dijkstra -> Elem -> {Abort, Ask Config} Dijkstra
account = cases dij@(Dijkstra q dis), e@(Elem d x y dir) -> let
    prev = dis |> at! dir |> at! x |> at! y
    if d >= prev then dij else
        q' = q |> Map.delete (Elem prev x y dir) |> Map.insert e ()
        dis' = updateDist d x y dir dis 
        Dijkstra q' dis'

gridSize : '{Ask Config} Nat
gridSize _ = grid ask |> List.size

step : Dijkstra -> { Throw Nat, Abort, Ask Config } Dijkstra
step = cases dij@(Dijkstra queue dists) -> let
    ((e@(Elem d x y dir), ()), q') = buggy "queue ended" do breakOffMin! queue
    dij' = Dijkstra.queue.set q' dij
    -- Debug.trace "got elem" e
    n' = gridSize () - 1
    when ((x == n') && (y == n')) do throw d
    fold! account dij' do nexts dij' e

dijkstra : Config -> {} Optional Nat
dijkstra = 
    go dij = go (step dij)
    cfg -> start >> go |> delay (provide cfg) |> delay (catchWith Some) |> Abort.toBug

run = read >> Config +1 3 >> dijkstra |> delay

s1 = run "sample"
i1 = run "input"

