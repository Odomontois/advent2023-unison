sample = FilePath "day13/sample.txt"
input = FilePath "day13/input.txt"

parse: Text -> List (List Text)
parse = lines >> List.split (Text.isEmpty) >> List.takeWhile (not << List.isEmpty)

transpose: List Text -> List Text
transpose = List.map toCharList >> List.transpose >> List.map fromCharList


smudges : Text -> Text -> {Smudge} ()
smudges t1 t2 = 
    use Bytes at!
    l = Nat.min (Text.size t1) (Text.size t2)
    b1 = Text.toUtf8 t1
    b2 = Text.toUtf8 t2
    toDefaultValue! () 
        do forIn 0 l (i -> if at! i b1 == at! i b2 then () else Smudge.smudge)


structural ability Smudge where 
    smudge : ()

countExactly : Nat -> '{g, Smudge} a -> '{g} Boolean
countExactly = 
    handler : Nat -> Request {Smudge} a -> {g} Boolean
    handler i = cases
        {Smudge.smudge -> k} -> if i == 0 then false else handle k () with handler (i - 1)
        { _ } -> i == 0

    i s -> do handle s () with handler i

mirror' : Nat -> List Text -> Optional Nat
mirror' smn lst = 
    reflects = cases (as, bs) ->
        reverse as
            |> Stream.fromList
            |> Stream.zipWith smudges (Stream.fromList bs)
            |> countExactly smn
            |> drain

    List.range 1 (List.size lst)  
        |> List.filter (flip List.splitAt lst >> reflects)
        |> List.head


score: Nat -> List Text -> Nat
score smn map = 
    scores m = mirror' smn >> Optional.map (x -> x Nat.* m)
    scores 100 map |> Optional.orElse (scores 1 (transpose map)) |> getOrElse 0


solve i f = do readFileUtf8 f |> parse |> List.map (score i) |> List.foldLeft (+) 0
s1 = solve 0 sample
i1 = solve 0 input

s2 = solve 1 sample
i2 = solve 1 input
