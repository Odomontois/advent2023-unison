
sample1 = FilePath "day20/sample1.txt"
sample2 = FilePath "day20/sample2.txt"
input = FilePath "day20/input.txt"

capt =
    use Pattern join optional
    nameP = capture (some asciiLetter)
    lineP = Pattern.join [capture (optional (chars "%&")), nameP, literal " -> ", sepSome (literal ", ") nameP]
    lines >> List.map (captures lineP) 

structural type ModuleKind = Origin | Flip | NAnd | Rx
structural type Module = {name: Text, kind: ModuleKind, inputs: Nat, outputs: Nat}


bitmap : [Nat] -> Nat
bitmap = List.foldRight setBit 0

(*>) = List.zipWith (<|)

analyze : Boolean -> [[Text]] ->{Exception} [Module]
analyze addRx ls = if addRx then analyze false (ls :+ ["rx", "rx"]) else 
    n = size ls
    names = ls |> map (at!! 1) 
    nameMap = names |> indexed |> Map.fromList
    broadcast = getOrElse 0 "broadcaster" nameMap
    byName n = getOrElse broadcast n nameMap
    outputs = ls |> map (drop 2 >> map byName >> bitmap)
    inputs = ls |> flatMap ( code -> let 
                    inp = byName (at!! 1 code) |> (x -> setBit x 0) 
                    drop 2 code |> map (out -> (byName out, inp)))
                |> NatMap.fromListWith (Nat.or)
                |> (m -> initialize n (i -> NatMap.getOrElse i 0 m))
    kinds = ls |> map (at!! 0 >> cases 
        "%" -> Flip
        "&" -> NAnd
        "rx" -> Rx
        "" -> Origin
        t -> raiseGeneric "unexpected kind" t
    )
    
    map Module names *> kinds *> inputs *> outputs

structural type Simulated = { next : Nat, lows : Nat, highs : Nat , rx: Boolean}

ones : Nat -> [Nat]
ones x = if x == 0 then [] else 
    b = Nat.trailingZeros x
    b +: ones (clearBit b x)


putAll : Nat -> Boolean -> Nat -> [Item] -> [Item]
putAll x high from ls = 
    if x == 0 then ls 
    else to = Nat.trailingZeros x
         putAll (clearBit to x) high from (ls :+ (Item high from to)) 

FLAG = 10

structural type Item = {high: Boolean, from: Nat, to: Nat}

simulate : Nat -> [Module] -> Simulated
simulate initialState modules = 
    start = findFirstIndex (kind >> (===) Origin) modules |> Optional.getOrElse 0
    Scope.run do
    memories = mutable.Array.of initialState (size modules)
    name i = at!! i modules |> Module.name
    go lows highs state = cases 
        (Item high from to) +: q -> 
            -- trace "signal" (name from ++ (if high then " -high-> " else " -low-> ") ++ name to)
            lows' = if high then lows else lows + 1
            highs' = if high then highs + 1 else highs
            (Module _ k ins outs) =  at!! to modules
            continue high' trigger = 
                state' = if (k === Flip) then changeBit to high' state else state
                q' = if trigger then putAll outs high' to q else q
                go lows' highs' state' q'
            ignore = ' (go lows' highs' state q)
            match k with
            Origin -> continue false (to == from)
            Flip ->
                continue (xor (not high) (bit to state != 0)) (not high)
            NAnd -> 
                pMem = mutable.Array.read memories to
                newMem = changeBit from high pMem 
                mutable.Array.write memories to newMem
                low = (Nat.and newMem ins) != ins
                continue low true
            Rx -> if high then ignore () else Simulated state lows highs true
        [] -> Simulated state lows highs false
    go 0 0 initialState [Item false start start]
    
loop : Boolean -> Nat -> [Module] ->  (Nat, Nat, Nat, Nat)
loop checkLoops count modules = 
    use mutable.Array read write freeze!
    Scope.run do
    loops = dependencies modules |> clean |> List.indexed
    n = size loops
    arr = Scope.arrayOf NatSet.empty n
    insertState state = cases (l, i) -> let
        cur = read arr i
        mappedState = Nat.and state l
        if NatSet.contains mappedState cur then true else
        write arr i (NatSet.insert mappedState cur)
        false 
    result = do
        xs = freeze! arr |> Array.toList |> map NatSet.size |> tap "loop sizes"
        (0, 0, 0, xs |> List.foldLeft (*) 1)
        
    checkState state = List.all (insertState state) loops
    go state i lows highs = 
        if i == count then (i, lows, highs, lows * highs) else 
        if checkLoops && checkState state then result () else 
        when (mod i 1000 == 0) '(Debug.trace "sims" i)
        (Simulated next addLows addHighs rx) = simulate state modules -- |> Debug.tap "simulated\n"
        if rx then (i, 0, 0, 0) else
        lows' = lows + addLows
        highs' = highs + addHighs
        go  next (i + 1) lows' highs'
    go 0 0 0 0



> bitmap [0, 1, 3] |> Nat.toTextBase 2

run1 = readFileUtf8 >> capt >> analyze false
        -- >> simulate 0 
        >> loop false 1000
        |> delay

s11 = run1 sample1
s12 = run1 sample2
i1 = run1 input

run2 = readFileUtf8 >> capt >> analyze true
        -- >> simulate 0 
        >> loop false 1000000 
        |> delay

i2 = run2 input


dependencies: [Module] -> {Exception} [Nat]
dependencies mods = 
    use mutable.Array read write freeze!
    Scope.run do
        arr = Scope.arrayOf 0 (size mods)
        walk b i = 
            c = read arr i
            when (bit b c == 0) do
                write arr i (setBit b c)
                at!! i mods 
                    |> Module.outputs 
                    |> ones 
                    |> foreach_ (j -> walk b j)
        mods |> indexed |> foreach_ (cases (mod, i) -> when (kind mod === Flip) do walk i i)
        freeze! arr |> toList |> distinct

clean : [Nat] -> [Nat]
clean = filter ((!=) 0) >> (xs -> let
        top = maximum xs |> Optional.getOrElse 0
        if (size xs > 1 ) && (List.all (b -> and top b == b) xs) then deleteFirst ((==) top) xs else xs)


run3 f = do readFileUtf8 f |> capt |> analyze true |> dependencies |> clean |> map ones

i3 = run3 input
s3 = run3 sample2

run4 f = do readFileUtf8 f |> capt |> analyze true |> loop true 100000000 
s41 = run4 sample1
s42 = run4 sample2

i4 = run4 input