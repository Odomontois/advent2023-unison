sample = FilePath "day11/sample.txt"
input = FilePath "day11/input.txt"

use data Array

parse: Text -> List (Nat, Nat)
parse =
  lines
    >> List.indexed 
    >> List.flatMap (cases (line, i) -> 
         toCharList line 
            |> List.indexed
            |> List.filterMap (cases (c, j) -> if c Char.== ?# then Some (i, j) else None))

countAccum : List Nat -> Array Nat
countAccum elems = 
    use Array 
    use Nat
    use mutable.Array read
    l = maximum elems |> Optional.getOrElse 0
    new! 0 (l + 2) (arr -> let
        List.foreach elems (i -> write arr (i + 1) 1)            
        go i s = if i > (l + 1) then () else 
            x = s + read arr i
            write arr i x
            go (i + 1) x
        go 0 0 )

dist : Nat -> Array Nat ->  Nat -> Nat -> Nat
dist mul arr i j = 
    if i > j then dist mul arr j i else
    nonSpace = Array.read arr (j + 1) - Array.read arr i
    space = j - i + 1 - nonSpace
    nonSpace + space * mul 

solve : Nat -> List (Nat, Nat) -> {Exception} Nat
solve mul elems = 
    hdist = elems |> List.map at1 |> countAccum |> dist mul
    vdist = elems |> List.map at2 |> countAccum |> dist mul
    go i = 
        (x1, y1) = List.at! i elems
        go' j = 
            (x2, y2) = List.at! j elems
            d = hdist x1 x2 + vdist y1 y2
            emit d
            go' (j + 1)
        toDefaultValue! () do go' (i + 1)
        go (i + 1)
    fold! (+) 0 <| toDefaultValue () do go 0
    
p1 f mul = do readFileUtf8 f |> parse |> solve mul

s1 = p1 sample
i1 = p1 input

s2a = p1 sample 9
s2b = p1 sample 99

i2 = p1 input 999999





