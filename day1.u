sample = FilePath "day1/sampleInput.txt"

sample2 = FilePath "day1/sampleInput2.txt"

fullInput = FilePath "day1/input.txt"

p1 file = 
    x = readFileUtf8 file
    numbers calibrationValue x

p2 file =
    x = readFileUtf8 file
    numbers calibrationValue2 x

samplep1 _ = p1 sample



fullp1 _ = p1 fullInput

fullp2 _ = p2 fullInput

samplep2 _ = p2 sample2

numbers cb text = Text.lines text |> List.filter (not << Text.isEmpty) |> List.map cb  |> List.foldLeft (+) 0

calibrationValue : Text -> {IO, Exception} Nat
calibrationValue text = 
    digits = toCharList text |> List.filter (isDigit)
    first = List.head digits |> Optional.toList
    last = List.last digits |> Optional.toList
    full = fromTextOrFail <| fromCharList (first ++ last)
    full

digitNames : [(Text, Nat)]
digitNames = 
    List.zip (toCharList "0123456789" |> List.map Char.toText) (List.range 0 10) ++
    List.zip ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"] (List.range 0 10)


starts : Text -> Nat -> Text -> Nat-> Boolean
starts text i pat j = 
    match charAt j pat with 
        None -> true
        Some c2 ->  match charAt i text with 
            None -> false
            Some c -> Char.eq c c2 && starts text (i + 1) pat (j + 1)

toDigit: Text -> Nat -> Optional Nat
toDigit text i = 
    start = Text.drop i text
    find (cases (name, _) -> starts text i name 0) digitNames |> Optional.map at2

search: Text -> Boolean -> Nat
search text inc = 
    n = Text.size text
    f = if inc then x -> (x + 1) else x -> (x - 1)
    start = if inc then 0 else (n - 1)
    go i = match toDigit text i with 
        None | inc && Nat.eq i (n - 1) -> 0
             | not inc && Nat.eq i 0 -> 0
        None      -> go (f i)
        Some d -> d
    go start
    
    

> toDigit "twone" 0
> toDigit "twone" 1
> toDigit "twone" 2

calibrationValue2 : Text -> {IO, Exception} Nat
calibrationValue2 text = 
    first = search text true
    last  = search text false
    first * 10 + last
